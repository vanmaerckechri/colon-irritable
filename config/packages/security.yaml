security:
    # https://symfony.com/doc/current/security.html#where-do-users-come-from-user-providers
    providers:
        my_provider:
            entity: { class: App:User, property: username }

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            pattern: ^/
            user_checker: App\Security\UserChecker
            anonymous: true
            logout:
                path: /logout
                target: /
            form_login:
                check_path: login
                csrf_token_generator: security.csrf.token_manager
            remember_me:
                secret: '%kernel.secret%'
                path: /
            guard:
                authenticators:
                    - App\Security\GoogleAuthenticator
                    - App\Security\MyFacebookAuthenticator
                entry_point: App\Security\UserProvider
                
                #always_use_default_target_path: false
                #default_target_path: /
                #target_path_parameter: _target_path
                #use_referer: true

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#firewalls-authentication

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    role_hierarchy:
        ROLE_ADMIN: ROLE_USER
    access_control:
        - { path: ^/member, roles: ROLE_USER }
        # - { path: ^/profile, roles: ROLE_USER }
    encoders:
        App\Entity\User:
            algorithm: auto
            cost: 12

knpu_oauth2_client:
    clients:
        # will create service: "knpu.oauth2.client.google"
        # an instance of: KnpU\OAuth2ClientBundle\Client\Provider\GoogleClient
        # composer require league/oauth2-google
        google:
            # must be "google" - it activates that type!
            type: google
            # add and configure client_id and client_secret in parameters.yml
            client_id: '%env(GOOGLE_CLIENT_ID)%'
            client_secret: '%env(GOOGLE_CLIENT_SECRET)%'
            # a route name you'll create
            redirect_route: connect_google_check
            redirect_params: {}
            # Optional value for sending access_type parameter. More detail: https://developers.google.com/identity/protocols/OpenIDConnect#authenticationuriparameters
            # access_type: null
            # Optional value for sending hd parameter. More detail: https://developers.google.com/identity/protocols/OpenIDConnect#hd-param
            # hosted_domain: null
            # Optional value for additional fields to be requested from the user profile. If set, these values will be included with the defaults. More details: https://developers.google.com/+/web/api/rest/latest/people
            # user_fields: {}
            # Optional value if you don't want or need to enable Google+ API access.
            # use_oidc_mode: false
            # whether to check OAuth2 "state": defaults to true
            # use_state: true
        # the key "facebook_main" can be anything, it
        # will create a service: "knpu.oauth2.client.facebook_main"
        facebook_main:
            # this will be one of the supported types
            type: facebook
            client_id: '%env(OAUTH_FACEBOOK_ID)%'
            client_secret: '%env(OAUTH_FACEBOOK_SECRET)%'
            # the route that you're redirected to after
            # see the controller example below
            redirect_route: connect_facebook_check
            redirect_params: {}
            graph_api_version: v2.12